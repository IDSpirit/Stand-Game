#Stand Generator made by ME!!!
#Unsanitary Accoplishments Exchanged for Currency Considered to be Insufficient-D4C
#Idea 1-Could make a program where two AI fight against each other
#Idea 2-Could make a program where two people on different computers/on the same computer fight each other with stands

#Improvement 1-Could add an op element for the enemy when fighting user to balance out the user's special move and so the fight is more fair
#Improvement 2-Could import previous stands that are already saved in the "stand_stats" file, might do a file search of the stand names and show the stand names, stats, + abilities in the file-Done
import random
import time
import os #Needed to find the location of this file on the computer (And therefore the stand overview text file)
import linecache #Needed to read the lines of files when importing

x=0
a=0
sss=0 #Might change this variable name to a more suitable one
rounds=1
move_done_already=0
box=0
round_number=0 ####################### Problem to do with this, isn't working with the "during_fight()"-Fixed
success_move="0"
during_fight_power="0"
getting_e_name=0
not_battling=0
did_battle="0"

print('''"I called it a 'stand' after light stands, the type that sit beside your bed in a 'looming' manner when you read"
—HiroHiko Araki''')
time.sleep(3)

name=input("\nWhat's your name? I shall grant you a stand with my own stand, 「HAIL TO YOU」: ")

all_names=["All Day", "All Falls Down", "All of the Lights", "Amazing", "Awesome", "Bad News", "Big Brother", "Black Skinhead", "Blame Game", "Blood On The Leaves",
"Bound 2", "Can't Tell Me Nothing", "Champion", "Christian Dior Denim Flow", "Clique", "Cold", "Coldest Winter", "Dark Fantasy", "Devil in a New Dress",
"Diamonds From Sierra Leone", "Don't Stop", "Everything I Am", "Facts", "Fade", "Famous", "Father Stretch My Hands Pt. 1", "Father Stretch My Hands Pt. 2",
"Flashing Lights", "FML", "Gold Digger", "Gone", "Good Friday", "Good Life", "Gorgeous", "Guilt Trip", "Heard 'Em Say", "Heartless", "Hell of a Life", "Hey Mama",
"Highlights", "Hold My Liquor", "Homecoming", "I Am a God", "I Wonder", "I'm In It", "Jesus Walks", "Lord, Lord, Lord", "Lost in The World", "Love Lockdown",
"Low Lights", "Mama's Boyfriend", "Mercy", "Monster", "New God Flow", "New Slaves", "No More Parties in L.A.", "On Sight", "Only One", "Paranoid", "Pinnochio Story",
"Power", "Real Friends", "Robocop", "Runaway", "Saint Pablo (Closest Thing to Einstein)", "Say You Will", "See Me Now", "See You In My Nightmares", "Send It Up",
"Siiiiiiiiilver Surffffeeeeer Intermission", "So Appalled", "Street Lights", "Stronger", "The Joy", "Through The Wire", "To the World", "Touch The Sky",
"Ultralight Beam", "Waves", "Welcome to Heartbreak", "White Dress", "Who Will Survive in America", "Wolves", "The Life of Pablo", "Yeezus",
"My Beautiful Dark Twisted Fantasy", "The College Dropout", "Late Registration", "808s and Heartbreak", "Get Well Soon", "Late Orchestration", "Freshmen Adjustment",
"Freshmen Adjustment 2", "Can't Tell Me Nothing", "Second Semester", "Never the Place", "Rise and Grind", "Ball or Stall 2", "Pacific Blues", "Hot Break"]

all_powers=["Healing Factor - Ability to heal rapidly and with greater finality from any injury; the rate of recovery varies from character to character. Can sometimes result in the slowing of aging and immunity to illnesses and other defects.",
"Acid Generation - Ability to generate acid, can be manifested through touch or as a spray (eg. acid spit, acid blood, etc.). ",
"Animal Mimicry - Ability to take on the abilities of certain animals.",
"Biological Manipulation - Ability to control all aspects of a living creature's biological make-up. This includes, but is not limited to, genetic alterations, physical distortion/augmentations, healing, disease, and biological functions. ",
"Body Part Substitution - Ability to replace one's limbs or other body parts with those of another.",
"Bone Manipulation - Ability to manipulate the bones in one's own body. This includes, but is not limited to, the generation of new bone mass, projecting bones out from the skin or rearranging one's own bones. ",
"Duplication (Physical) - Ability to create physical duplicates of oneself. ",
"Duplication (Temporal) - Ability to bring past and future versions of oneself back to the present. ",
"Echolocation - Ability to determine location of objects in the environment by use of reflected sound waves, whether generated by the character or ambient sound. Also known as sonar or radar sense. ",
"Invisibility - Ability to render the user unseen to the naked eye and/or other forms of perception. ",
"Invulnerability - Ability to be immune to one or more forms of physical, mental, and spiritual damage and influence. Those who are invulnerable often have bodies with texture and durability above that of steel while still maintaining their soft/natural textures and functions.", #Temp invulnerability x rounds
"Kinetic Absorption - Ability to absorb forms of kinetic energy into oneself and utilize it in some way, such as by converting it into physical strength or using it to power energy blasts. ", #absorb x_factor % enemy attack and adds to user attack
"Matter Ingestion - Ability to consume any sort of matter without any ill effects on the user. ", #Consumes enemy matter to weaken their attack power for x rounds
"Merging - Ability to temporarily merge two or more beings into a single being, which results in a completely new and stronger being. ", #
"Pheromone manipulation - Ability to generate and control pheromones which may have various effects. ", #Weakens enemy attacks as it distracts them for x rounds
"Poison Generation - Ability to assault others with one or more varieties of toxins, with widely disparate effects. ", #Slowly drains their health by x_factor %
"Prehensile/Animated Hair - Ability to animate and lengthen one's hair. ", 
"Reactive Adaptation/Evolution - Ability to develop a resistance or immunity to whatever they were injured by or exposed to. This effect can be permanent or temporary. ", #
"Self-Detonation or Explosion & Reformation - Ability to explode one's body mass and reform. ", #Explodes the user and enemy, the power of the explosion is proportional to x_factor %
"Sonic Scream - Ability to generate vocal sounds of a higher amplitude than a normal human. ", #Damages enemy ears and confuses them, stopping enemy attack for x rounds
"Vortex Breath - Ability to inhale/exhale with superhumanly powerful strength. This can range from exhalation on par with gale force winds to inhalation on par with the power of a gravitational vortex. In some cases, freezing temperatures can also be achieved."]


def ask_if_importing():
    ask_import=input("\nWould you like to import a stand that you've saved previously? (1 for yes or 2 for no): ")
    
    if ask_import=="1":
        print("\n")
        importing()
    elif ask_import!="1" and ask_import!="2":
        print("\nError, incorrect input. Please try again")
        time.sleep(2)
        ask_if_importing()

def importing():
    global name
    global getting_e_name
    global s_name
    global c_phrase
    global s_powers
    global s_class
    global s_move
    global power
    global speed
    global rnge
    global dure
    global pres
    global devp
    global user_stats
    global f_colour
    global s_colour
    global height
    global not_battling
    
    f=open("Stand_Stats.txt","r", encoding="utf-8")
    searchlines = f.readlines()
    
    for i, line in enumerate(searchlines):
        if "Stand User- " + name in line: 
            for l in searchlines[i:i+20]: print(l),
            right_stand=input("Is this the stand you want? (1 for yes or 2 for no): ")
            print("\n-----------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------\n")
            if right_stand=="1":
                not_battling=1
                print("\n" + str(i) + "\n")
                name=linecache.getline("Stand_Stats.txt",i+1)
                name=name.replace("Stand User- ","")
                name=name.replace("\n","")
                print(name)
                s_name=linecache.getline("Stand_Stats.txt",i+2)
                s_name=s_name.replace("Stand Name-「","")
                s_name=s_name.replace("」","")
                s_name=s_name.replace("\n","")
                print(str(s_name))
                c_phrase=linecache.getline("Stand_Stats.txt",i+3)
                c_phrase=c_phrase.replace("Stand User Catchphrase- ","")
                c_phrase=c_phrase.replace("\n","")
                print(str(c_phrase))
                s_powers=linecache.getline("Stand_Stats.txt",i+4)
                s_powers=s_powers.replace("\n","")
                if s_powers=="Stand Ability- Healing Factor - Ability to heal rapidly and with greater finality from any injury; the rate of recovery varies from character to character. Can sometimes result in the slowing of aging and immunity to illnesses and other defects.":
                    s_powers=all_powers[0]
                elif s_powers=="Stand Ability- Acid Generation - Ability to generate acid, can be manifested through touch or as a spray (eg. acid spit, acid blood, etc.). ":
                    s_powers=all_powers[1]
                elif s_powers=="Stand Ability- Animal Mimicry - Ability to take on the abilities of certain animals.":
                    s_powers=all_powers[2]
                elif s_powers=="Stand Ability- Biological Manipulation - Ability to control all aspects of a living creature's biological make-up. This includes, but is not limited to, genetic alterations, physical distortion/augmentations, healing, disease, and biological functions. ":
                    s_powers=all_powers[3]
                elif s_powers=="Stand Ability- Body Part Substitution - Ability to replace one's limbs or other body parts with those of another.":
                    s_powers=all_powers[4]
                elif s_powers=="Stand Ability- Bone Manipulation - Ability to manipulate the bones in one's own body. This includes, but is not limited to, the generation of new bone mass, projecting bones out from the skin or rearranging one's own bones. ":
                    s_powers=all_powers[5]
                elif s_powers=="Stand Ability- Duplication (Physical) - Ability to create physical duplicates of oneself. ":
                    s_powers=all_powers[6]
                elif s_powers=="Stand Ability- Duplication (Temporal) - Ability to bring past and future versions of oneself back to the present. ":
                    s_powers=all_powers[7]
                elif s_powers=="Stand Ability- Echolocation - Ability to determine location of objects in the environment by use of reflected sound waves, whether generated by the character or ambient sound. Also known as sonar or radar sense. ":
                    s_powers=all_powers[8]
                elif s_powers=="Stand Ability- Invisibility - Ability to render the user unseen to the naked eye and/or other forms of perception. ":
                    s_powers=all_powers[9]
                elif s_powers=="Stand Ability- Invulnerability - Ability to be immune to one or more forms of physical, mental, and spiritual damage and influence. Those who are invulnerable often have bodies with texture and durability above that of steel while still maintaining their soft/natural textures and functions.":
                    s_powers=all_powers[10]
                elif s_powers=="Stand Ability- Kinetic Absorption - Ability to absorb forms of kinetic energy into oneself and utilize it in some way, such as by converting it into physical strength or using it to power energy blasts. ":
                    s_powers=all_powers[11]
                elif s_powers=="Stand Ability- Matter Ingestion - Ability to consume any sort of matter without any ill effects on the user. ":
                    s_powers=all_powers[12]
                elif s_powers=="Stand Ability- Merging - Ability to temporarily merge two or more beings into a single being, which results in a completely new and stronger being. ":
                    s_powers=all_powers[13]
                elif s_powers=="Stand Ability- Pheromone manipulation - Ability to generate and control pheromones which may have various effects. ":
                    s_powers=all_powers[14]
                elif s_powers=="Stand Ability- Poison Generation - Ability to assault others with one or more varieties of toxins, with widely disparate effects. ":
                    s_powers=all_powers[15]
                elif s_powers=="Stand Ability- Prehensile/Animated Hair - Ability to animate and lengthen one's hair. ":
                    s_powers=all_powers[16]
                elif s_powers=="Stand Ability- Reactive Adaptation/Evolution - Ability to develop a resistance or immunity to whatever they were injured by or exposed to. This effect can be permanent or temporary. ":
                    s_powers=all_powers[17]
                elif s_powers=="Stand Ability- Self-Detonation or Explosion & Reformation - Ability to explode one's body mass and reform. ":
                    s_powers=all_powers[18]
                elif s_powers=="Stand Ability- Sonic Scream - Ability to generate vocal sounds of a higher amplitude than a normal human. ":
                    s_powers=all_powers[19]
                elif s_powers=="Stand Ability- Vortex Breath - Ability to inhale/exhale with superhumanly powerful strength. This can range from exhalation on par with gale force winds to inhalation on par with the power of a gravitational vortex. In some cases, freezing temperatures can also be achieved.":
                    s_powers=all_powers[20]
                #print(str(s_powers)) ####################
                s_class=linecache.getline("Stand_Stats.txt",i+5)
                s_class=s_class.replace("Stand Class- ","")
                s_class=s_class.replace("\n","")
                print(str(s_class))
                s_move=linecache.getline("Stand_Stats.txt",i+6)
                s_move=s_move.replace("Special Attack- ","")
                s_move=s_move.replace("\n","")
                take_off=s_move.find("-")
                if str(take_off)!="-1": 
                    s_move=s_move.replace(s_move[take_off:],"")
                print(str(s_move))
                power=linecache.getline("Stand_Stats.txt",i+9)
                power=power.replace("Power- ","")
                power=power.replace("\n","")
                print(str(power))
                speed=linecache.getline("Stand_Stats.txt",i+10)
                speed=speed.replace("Speed- ","")
                speed=speed.replace("\n","")
                print(str(speed))
                rnge=linecache.getline("Stand_Stats.txt",i+11)
                rnge=rnge.replace("Range- ","")
                rnge=rnge.replace("\n","")
                print(str(rnge))
                dure=linecache.getline("Stand_Stats.txt",i+12)
                dure=dure.replace("Durability- ","")
                dure=dure.replace("\n","")
                print(str(dure))
                pres=linecache.getline("Stand_Stats.txt",i+13)
                pres=pres.replace("Precision- ","")
                pres=pres.replace("\n","")
                print(str(pres))
                devp=linecache.getline("Stand_Stats.txt",i+14)
                devp=devp.replace("Development Potential- ","")
                devp=devp.replace("\n","")
                print(str(devp))
                user_stats=[power, speed, rnge, dure, pres, devp]
                f_colour=linecache.getline("Stand_Stats.txt",i+17)
                f_colour=f_colour.replace("Primary Colour- ","")
                f_colour=f_colour.replace("\n","")
                print(str(f_colour))
                s_colour=linecache.getline("Stand_Stats.txt",i+18)
                s_colour=s_colour.replace("Secondary Colour- ","")
                s_colour=s_colour.replace("\n","")
                print(str(s_colour))
                height=linecache.getline("Stand_Stats.txt",i+20)
                height=height.replace("Height- ","")
                height=height.replace("\n","")
                print(str(height))
                getting_e_name=1
                names()
                stand_s_move()
                overview()
                asking_battle()
                print("YESSSSSSSSSSS!!!!!!!!!!!!!!!!!!!!!!!")
                break
            elif right_stand!="1" and right_stand!="2":
                print("\nError, incorrect input. Please try again\n")
                time.sleep(3)
                print("\n-----------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------\n")
                importing()

    def asking_again():
        ask_import_again=input("\nLooks like there aren't any other stands associated with your name, would you like to see the file again? (1 for yes or 2 for no): ")

        if ask_import_again=="1":
            print("\n")
            importing()
        elif ask_import_again=="2":
            print("\nI'll give you a fresh clean stand then, right out the box!")
            time.sleep(3)
        elif ask_import_again!="1" and ask_import_again!="2":
            print("nError, incorrect input. Please try again")
            time.sleep(3)
            asking_again()

    asking_again()

def names():
    global s_name
    global s_powers
    global e_name
    global e_powers

    if getting_e_name==0:
        s_name=random.choice(all_names)
        s_powers=random.choice(all_powers)
    e_name=random.choice(all_names)
    e_powers=random.choice(all_powers)
    
    if e_name==s_name:
        names()
    elif e_powers==s_powers:
        names()

    name_printing()
        
def name_printing(): # Had to make this to stop the names() section from printing this below section repeatedly if the user and enemy stand names or powers are the same
    if getting_e_name==0:
        print("\nYour stand is called 「" + str(s_name) + "」 and it's ability is: \n" + str(s_powers))

def carry_on():
    continuation=input("\n-----------------------------------------------------------------------------------\n\nWould you like to know more about 「" + str(s_name) + "」 (1 for yes or 2 for no): ").lower()

    if continuation=="1":
        print("\n-----------------------------------------------------------------------------------\n")
    elif continuation=="2":
        print("\n-----------------------------------------------------------------------------------\n")
        print("\nOkay, have fun with 「" + str(s_name) + "」!")
        time.sleep(2)
        quit()
    elif continuation!="1" and "2":
        print("\nError, incorrect input. Please try again")
        time.sleep(2)
        carry_on()

def stand_ability():
    global x #ALWAYS DECLARE GLOBAL VARIABLES AT THE START OF A FUNCTION!!!
    global a
    global b
    global power
    global speed
    global rnge
    global dure
    global pres
    global devp
    global s_class
    global e_class
    global ability
    global result
    global detail
    global sss
    global e_stats
    
    while x!=6:
        x=x+1
        choice=random.randint(1,5)
        global result
        if str(choice)=="1": 
            result="A"
        elif str(choice)=="2": 
            result="B"
        elif str(choice)=="3": 
            result="C"
        elif str(choice)=="4": 
            result="D"
        elif str(choice)=="5": 
            result="E"

        if x==1:
            ability="power"
            power=str(result)
            detail="Destructive Power (破壊力 Hakairyoku):\nMeasures the Stand's strength and ability to cause destruction (physical injury or collateral environmental damage) in a given period of time. Not only limited to brute force, but also to its abilities combined."
        elif x==2:
            ability="speed"
            speed=str(result)
            detail="Speed (スピード Supīdo):\nMeasures the Stand's agility and performance speed."
        elif x==3:
            ability="range"
            rnge=str(result)
            detail="Range (射程距離 Shatei Kyori):\nMeasures a compromise of the Stand's range of manifestation, range of ability influence, and spatial mobility."
        elif x==4:
            ability="durability"
            dure=str(result)
            detail="Durability/Staying (持続力 Jizoku-ryoku):\nMeasures the Stand's endurance and level of susceptibility to damage and attacks. This category may also gauge the effectiveness of their power's ability of binding toward physical objects."
        elif x==5:
            ability="precision"
            pres=str(result)
            detail="Precision (精密動作性 Seimitsu Dōsa-sei):\nMeasures the Stand's accuracy and range of influence/effect of their abilities to specified targets."
        elif x==6:
            ability="development potential"
            devp=str(result)
            detail="Development Potential/Learning (成長性 Seichō-sei):\nMeasures the Stand's possible functions, utilization of its abilities and powers, and capacity to improve its overall capabilities."

        cs='''\nCLOSE-RANGE STAND
Close-Range Power Type (近距離パワー型 Kinkyōri Powā Gata)
Stands are known for being able to inflict powerful attacks or deal close-range effects,
with destructive power and speed normally ranking between A-B.
However, they are only able to move small distances from their users and/or have short-range attacks or effect radius.
These Stands will generally obey their users' will.'''
        
        if (x==1) and (choice==1 or choice==2):
            a="crs"
            b=cs
            s_class="Close-Range Stand"
            e_class="Close-Range Stand"
        elif (x==2) and (choice==1 or choice==2):
            if a==0:
                a="crs"
                b=cs
                s_class="Close-Range Stand"
                e_class="Close-Range Stand"
        elif (x==3) and (choice==1):
            if a==0:
                a="lrs"
                b='''\nLONG-DISTANCE STAND
Long Distance Manipulate Type (遠隔操作型 Engaku Sōsaku Gata)
follow their users' will and are capable of long-range movement.
These Stands normally have ranged attacks and/or attack from far distances,
which is why most Stands of this type are typically ranked A in range.
On the other hand, they are generally unable to defend themselves in close-quarters combat.'''
                s_class="Long-Distance Stand"
                e_class="Long-Distance Stand"
        elif (x==3) and (choice==4 or choice==5):
            if a==0:
                a="ws"
                b='''\nWEARABLE STAND
Wearable Type (装着型 Sōchaku-gata)
Stands cover their user like armor, defending them along with the use of their abilities.
Because they are bound to their user, their range is often short,
though depending on the Stand they may be able to use projectile attacks.'''
                s_class="Wearable Stand"
                e_class="Wearable Stand"
        elif (x==4) and (choice==1):
            if a==0:
                a="es"
                b='''\nEQUIPMENT STAND
Equipment Type (道具型 Dōgu-gata)
Stands are a subtype of bound Stands which give the user additional abilities.
The Stand user uses the ability without the Stand itself appearing corporeally,
as the Stand is part of the user's own body. Ability stands typically rank A in durability,
because they do not take damage themselves and can only deactivate if their users are incapacitated.'''
                s_class="Equipment Stand"
                e_class="Equipment Stand"
        elif (x==5) and (choice==4 or choice==5):
            if a==0:
                a="as"
                b='''\nAUTOMATIC STAND
Far Distance Autopilot Type (遠隔自動操縦型 Enkaku Jidō Sōjū-gata)
are Stands that act on their own. They follow a simple objective without directly
obeying orders from their original users, though they can be preset to follow orders
before they are activated. Said users do not have to be present for the Stands to do anything,
as these Stands are known for having a range that is close to infinite, with no diminish in power
relative to the distance from their user. Due to the Stand being automated, if the Stand takes any damage,
the user will not receive any damage at all (in most cases).
Their weakness is that automated Stands often lack precision and are clumsy compared to normal Stands'''
                s_class="Automatic Stand"
                e_class="Automatic Stand"
        elif (x==6) and (choice==3 or choice==4 or choice==5):
            if a==0:
                a="bs"
                b='''\nBOUND STAND
Substance Assimilation Type (物質同化型 Busshitsu Dōka-gata),
or bound Stands, are bound to material objects, such as vehicles or dolls.
Said Stands, if bound to fluid objects, may even be intangible. These Stands can be used as equipment
and can be seen by ordinary humans. Although most of them vary in terms of statistics,
they commonly have medium-to-no development potential due to these Stands only being able
to manipulate the object they are bound to.'''
                s_class="Bound Stand"
                e_class="Bound Stand"
        elif x==6 and a==0:
            b='''\nHmm... it seems your stand 「''' + str(s_name) + '''」 isn't bound to any main class of stand, this means it is a:
Special Stand 専用スタンド (Sen'yō sutando)'''
            s_class="Special Stand"
            e_class="Special Stand"

        def carry_on_two():
            more=input("\nWould you like to know more about 「" + str(s_name) + "」 (1 for yes or 2 for no): ")#.lower()
            print("\n-----------------------------------------------------------------------------------")
            
            if x==6:
                print("\nYour stand's type is: \n" + str(b))
            elif more=="1" and x!="6":
                stand_ability()
            elif more=="2":
                print("Okay, have fun with 「" + str(s_name) + "」!")
                quit()
            else:
                print("Error, incorrect input. Please try again")
                time.sleep(2)
                carry_on_two()

        if sss==0:
            user_details()
            carry_on_two()
        elif sss==1:
            enemy_stand()
            e_stats=[power, speed, rnge, dure, pres, devp]


def user_details():
    print("\n" + str(name) + ", you're stand's " + str(ability) + " is " + str(result) + "\n") #######COULD WORK OUT THE PERCENTAGE CHANCE OF EACH CLASS ON PAPER FOR USER TO SEE
    print(detail + "\n-----------------------------------------------------------------------------------")

def enemy_stand():
    print("The ENEMY STANDO「" + str(e_name) + "」's " + str(ability) + " is " + str(result))
    time.sleep(2)

def stand_s_move():
    global s_move
    global user_stats
    global s_move_desc
    global s_move_power
    global factor
    global f_factor
    global animal
    global animal_copy
    global round_thing
    global during_fight_power
    
    user_stats=[power, speed, rnge, dure, pres, devp]
    
    if getting_e_name==0:
        s_move=random.choice(all_names)
        
    if s_move==s_name:
        stand_s_move()
    else:
        s_move_power=user_stats[5]
        
        if s_move_power=="A":
            factor=5 ################### Might need to change the "factor" to be smaller so it's more fair? 
            round_thing="rounds"
            animal=("dragon")
            animal_copy=("cheetah")
        elif s_move_power=="B":
            factor=4
            round_thing="rounds"
            animal=("falcon")
            animal_copy=("horse")
        elif s_move_power=="C":
            factor=3
            round_thing="rounds"
            animal=("wolf")
            animal_copy=("kangaroo")
        elif s_move_power=="D":
            factor=2
            round_thing="rounds"
            animal=("rat")
            animal_copy=("rabbit")
        elif s_move_power=="E":
            factor=1
            round_thing="round"
            animal=("sheep")
            animal_copy=("giraffe")
            
        f_factor=int(factor*10)
        
        if s_powers==all_powers[0]: 
            s_move_desc=("The user will be able to restore health with their stand by a factor of " + str(f_factor) + "%")
        elif s_powers==all_powers[1]:
            s_move_desc=("The user will be able to generate acid which they will be able to spit onto the enemy, taking " + str(f_factor) + "% of the enemy's health")
        elif s_powers==all_powers[2]:
            s_move_desc=("The user will be able to mimick the legs of a " + str(animal_copy) + " to increase their speed and dodging by " + str(f_factor) + "%")
        elif s_powers==all_powers[3]:
            s_move_desc=("The user will be able to change into a " + str(animal) + " and take " + str(f_factor) + "% of the enemy health")
        elif s_powers==all_powers[4]:
            during_fight_power="1"
            s_move_desc=("The user will be able to switch arm limbs with the enemy for " + str(factor) + " rounds, switching attack power")
        elif s_powers==all_powers[5]:
            s_move_desc=("The user will be able to develop additional bone mass which will increase their defense by " + str(f_factor) + "%")
        elif s_powers==all_powers[6]:
            during_fight_power="1"
            s_move_desc=("The user will be able to create a clone of themselves that attacks with " + str(f_factor) + "% of the user's attack power until the clone is attacked and killed")
        elif s_powers==all_powers[7]:
            during_fight_power="1"
            s_move_desc=("The user will be able to draw knowledge from parallel existances of itself, accurately predicting " + str(factor) + " " + str(round_thing) + " of the enemy's moves")
        elif s_powers==all_powers[8]:
            during_fight_power="1"
            s_move_desc=("The user will be able to use their echolocation to find the enemy which decreases the enemy's dodging chance to 0 for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[9]:
            during_fight_power="1"
            s_move_desc=("The user will be able to turn completely invisible, preventing the enemy from attacking them for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[10]:
            during_fight_power="1"
            s_move_desc=("The user will be able to temporarily turn completely invulnerable for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[11]:
            s_move_desc=("The user will be able to absorb " + str(f_factor) + "% of the enemy's kinetic attack energy and adds to the user's attack power")
        elif s_powers==all_powers[12]:
            during_fight_power="1"
            s_move_desc=("The user will be able to consume enemy matter to weaken their attack power by half for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[13]:
            s_move_desc=("The user will be able to split themselves into " + str(factor) + " seperate beings which each all attack with half your original attack")
        elif s_powers==all_powers[14]:
            during_fight_power="1"
            s_move_desc=("The user will be able to weaken enemy attacks by half, distracting them with natural pheromones for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[15]:
            during_fight_power="1"
            s_move_desc=("The user will be able to slowly seep the enemy's health with poison spikes thrown at their feet by " + str(f_factor) + "% every round unless the spikes are destroyed")
        elif s_powers==all_powers[16]:
            during_fight_power="1"
            s_move_desc=("The user will be able to protect themselves by extending their hair and guarding themselves for " + str(factor) + " " + str(round_thing) + ", halving any enemy attack")
        elif s_powers==all_powers[17]:
            s_move_desc=("The user will be able to develop a " + str(f_factor) + "% immunity to enemy attacks by adapting to the enemy's attacks and attack pattern")
        elif s_powers==all_powers[18]:
            s_move_desc=("The user will be able to explode themselves alongside the enemy, the power of the explosion proportional to " + str(f_factor) + "% but you become twice as weak to attacks for 1 round")
        elif s_powers==all_powers[19]:
            during_fight_power="1"
            s_move_desc=("The user will be able to scream at the enemy with extreme high ultrasound waves which disorientates them, stopping enemy attacks for " + str(factor) + " " + str(round_thing))
        elif s_powers==all_powers[20]:
            during_fight_power="1"
            s_move_desc=("The user will be able to shout at the enemy with such force that the enemy frosts and slows down, stopping them from dodging for " + str(factor) + " " + str(round_thing))
        
        if getting_e_name==0:
            print("\n「" + str(s_name) + "」's special move is called '" + str(s_move) + "'")
            print("\nThe stand's special move is based on their stand ability and their stand's development potential stat, depending on this stat their special move could be a pro or con to the user depending on how it's used\n")
            print("Special ability power: " + str(s_move_desc))

def colour_choice():
    global f_colour 
    global s_colour
    
    colour=["Fiery Red", "Azure Blue", "Sunshine Yellow", "Emerald Green", "Amethyst Purple", "Saffron Orange", "Gunmetal Silver", "Rose Gold", "Charcoal Black",
            "Cloudy White", "Iron Grey"]
    f_colour=random.choice(colour)
    s_colour=random.choice(colour)
    
    if f_colour==s_colour:
        colour_choice() #Bug fix?: Maybe the repetition is to do with this section (The colours stay the same when re-outputted but height + catchphrase change
        
def stand_appearance(): 
    global foot
    global inch
    global c_phrase
    global foot_sign
    global inch_sign
    global height
    
    foot=random.randint(1,8)
    inch=random.randint(1,11)
    catchphrases=["Come On Fam", "Don't Let This Die", "I Need This", "George Bush Doesn't Care About Black People", "No One Man Should Have All That Power",
                 "I'm A Mother****ing Lyrical Wordsmith Mother****ing Genius", "I'm On My Van Gogh, I Don't Hear S**t", "Imma look to the mirror if I need some help",
                 "Well **** Your Coloring Book", "Dawg If I Were You I'd Kill Myself", "Bow In The Presence Of Greatness", "My Presence Is A Present", "Kiss My Ass",
                 "Left Down The Road, And Take A Right From Hell, And There You Are", "I Call This Club Titanic.. WHY??? CUZ ITS GOING DOWN",
                 "You Should Be Honored By My Lateness", "I Was Too Busy Rapping", "Wait Till I Get My Money Right", "Life Is Awesome",
                 "If The Bible Was Written Today, I Would Be In It", "I'm A Star, How Could I Not Shine", "You Should Make Your Own Toilet Tissue Since You The S**t!",
                 "DEY AINT BOUT DAT LYFE"]
    c_phrase=random.choice(catchphrases)

    print("\nYour stand's colour scheme is: Primary Colour- " + str(f_colour) + " and Secondary Colour-" + str(s_colour))
    if s_class=="Wearable Stand" or s_class=="Equipment Stand":
        print("\nYour stand does not have any size and is bound to your body")
        foot="No"
        foot_sign="t"
        inch="Applicabl"
        inch_sign="e"
        height=str(foot) + str(foot_sign) + " " + str(inch) + str(inch_sign)
    else:
        foot_sign="'"
        inch_sign='"'
        height=str(foot) + str(foot_sign) + " " + str(inch) + str(inch_sign)
        print("\nYour stand's height is: " + str(foot) + str(foot_sign) + " and " + str(inch) + str(inch_sign))
        
    print("\nYour catchphrase is: '" + str(c_phrase) + "'") 
    ################# COULD ADD A STAND RUSH

    ################# PIC TO ASCII CONVERER FOR STAND IMAGES MAYBE, ALREADY SAVED IN BOOKMARKS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

def overview(): ###########COULD STORE ALL OVERVIEW INFO IN A TEXT FILE IF USER WANTS TO-Done
    global everything
    global intro_everything
    global python
    global e_stats
    
    intro_everything=("\nHere's an overview of you and your stand:\n-----------------------------------------\n")
    everything=('''Stand User- ''' + str(name) + '''
Stand Name-「''' + str(s_name) + '''」
Stand User Catchphrase- ''' + str(c_phrase) + '''
Stand Ability- ''' + str(s_powers) + '''
Stand Class- ''' + str(s_class) + '''
Special Attack- ''' + str(s_move) + ''' - ''' + str(s_move_desc) + '''\n-----------------------------------------
Stand Statistics: ''' + '''
Power- ''' + str(power) + '''
Speed- ''' + str(speed) + '''
Range- ''' + str(rnge) + '''
Durability- ''' + str(dure) +  '''
Precision- ''' + str(pres) + '''
Development Potential- ''' + str(devp) +'''\n-----------------------------------------
Colour Scheme:
Primary Colour- ''' + str(f_colour) + '''
Secondary Colour- ''' + str(s_colour) + '''\n-----------------------------------------
Height- ''' + str(height) + '''\n-----------------------------------------
''')
    
    if getting_e_name==0:
        print(intro_everything)
        print(everything)

def file_save():
    q=input("Would you like to store you and your stand's data in a file for later viewing (1 for yes or 2 for no): ")
    
    if q=="1":
        f=open("Stand_Stats.txt","a", encoding="utf-8") #That last part was added, can't remember why-oh yeah it was because an error occurred and this was the searched solution since the text file has a particular format
        print("\nSaving... Just chill a moment lad... Hehe I'm just making you wait, the secondary power of my STANDO 「HAIL TO YOU」!!!!!")
        f.write(str(intro_everything))
        f.write(str(everything) + "\n-----------------------------------------")
        time.sleep(4)
        print("\nDone! Your data is stored in '" + os.path.dirname(os.path.realpath(__file__)) + "' as the file name 'Stand_Stats.txt'")
        f.close()
        time.sleep(3)
    elif q=="2":
        return
    else:
        print("Error, incorrect input. Please try again")
        time.sleep(2)
        file_save()

def asking_battle(): 
    global sss
    global x
    global a
    global name
    global asking_battle_option
    
    bond=input('''\nWould you like to test the bond between you and your STANDO in a full on fight against Python or have the program fight for you???
1: Fighting the enemy with your stand yourself
2: For an autonomous avatar to fight using your stand (Recommended for beginners at first)
3: No battle (BOOOO!!!!!!!!!!!): ''')
    
    if (str(bond)=="1") or (str(bond)=="2"):
        sss=1
        x=0
        a=0
        
        if str(bond)=="1":
            asking_battle_option="1"
        elif str(bond)=="2":
            asking_battle_option="2"
            if name.find(" Avatar")=="-1":
                name=str(name) + " Avatar"

        if did_battle=="0":
            print("\nYOUR ENEMY STANDO IS「" + str(e_name) + "」 \nゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ ゴ")
            time.sleep(2)
            print("\nYour enemy's stats are going to be: ")
            time.sleep(2)
            stand_ability()
        battle_stats()
    elif str(bond)=="3":
        carry_on() ###################################### NEED TO CHANGE THIS FUNCTION CALL TO THE ONE AFTER THE BATTLE!!!!!!!!!!!!!!!!!!!!!!!
        
        if not_battling==1:
            print("\nToo bad! That's all you're gonna get! 「HELL TO YOU」ゴ ゴ ゴ ゴ ゴ")
            quit()
    else:
        print("\nError, incorrect input. Please try again")
        time.sleep(2)
        asking_battle()

def battle_stats():
    global health
    global hp
    global e_health
    global e_hp
    global strength
    global attack
    global e_attack
    global avoid
    global dodge
    global e_dodge
    global special
    global plan
    global original_hp
    global original_e_hp
    global original_attack
    global original_e_attack
    global original_dodge
    global original_e_dodge
    global e_box
    
    health=user_stats[3]
    e_health=e_stats[3]
    if health=="A":
        hp=1000
    elif health=="B":
        hp=900
    elif health=="C":
        hp=800
    elif health=="D":
        hp=700
    elif health=="E":
        hp=600
    if e_health=="A": #Can't be "elif" here because it's different to the other elifs above with a different variable, "e_hp", for some reason
        e_hp=1000
    elif e_health=="B":
        e_hp=900
    elif e_health=="C":
        e_hp=800
    elif e_health=="D":
        e_hp=700
    elif e_health=="E":
        e_hp=600

    original_hp=int(hp)
    original_e_hp=int(e_hp)
        
    strength=user_stats[0]
    e_strength=e_stats[0]
    if strength=="A":
        attack=80
    elif strength=="B":
        attack=70
    elif strength=="C":
        attack=60
    elif strength=="D":
        attack=50
    elif strength=="E":
        attack=40
    if e_strength=="A":
        e_attack=80
    elif e_strength=="B":
        e_attack=70
    elif e_strength=="C":
        e_attack=60
    elif e_strength=="D":
        e_attack=50
    elif e_strength=="E":
        e_attack=40

    if s_powers==all_powers[14] or s_powers==all_powers[12]:
        e_box=int(e_attack) #Did this so "e_attack" would go back to normal even if it's drastically reduced by repeated use
        
    g_attack=int(attack/2)
    g_e_attack=int(e_attack/2)

    original_attack=int(attack)
    original_e_attack=int(e_attack)
    
    avoid=user_stats[1]
    e_avoid=e_stats[1]
    if avoid=="A":
        dodge=6
    elif avoid=="B":
        dodge=5
    elif avoid=="C":
        dodge=4
    elif avoid=="D":
        dodge=3
    elif avoid=="E":
        dodge=2
    if e_avoid=="A":
        e_dodge=6
    elif e_avoid=="B":
        e_dodge=5
    elif e_avoid=="C":
        e_dodge=4
    elif e_avoid=="D":
        e_dodge=3
    elif e_avoid=="E":
        e_dodge=2

    original_dodge=int(dodge)
    original_e_dodge=int(e_dodge)
        
    special=user_stats[4]
    if special=="A":
        plan=6
    elif special=="B":
        plan=5
    elif special=="C":
        plan=4
    elif special=="D":
        plan=3
    elif special=="E":
        plan=2
        
    battle_intro()

def battle_intro():
    basics=input('''\nSo, you wanna fight huh??? Well you're gonna have to learn the basics first!!!
Type 1 to learn the basics or 2 to skip ahead if you already know it: ''')
    if basics=="2":
        print("\nSomeone's overconfident, let's see those skills in action\n")
        time.sleep(2)
        battling()
    elif basics=="1":
        print("\nYour enemy will have the same choices as you, you'll both be able to 'Attack', 'Guard' and 'Dodge', but only you (a human I hope) have the ability to plan, use wisely...")
        time.sleep(6)
        print("\nYour HP is based on your stand's durability stat, which is " + str(health) + ", the higher it is, the more health you have at the start")
        time.sleep(6)
        print("\nYour attack is based on your stand's power stat, which is " + str(strength) + ", the higher it is, the more hp you take off your opponent per hit")
        time.sleep(6)
        print("\nIf you choose to guard, then if the enemy decides to attack you, you'll only take half the damage, otherwise you'll stand there like an idiot")
        time.sleep(6)
        print("\nYour dodging chance is based on your stand's speed stat, which is " + str(avoid) + ", the higher it is, the better the chance you have of dodging their attack unharmed")
        time.sleep(6)
        print("\nYour planning is based on your stand's precision stat, which is " + str(special) + ", the higher it is, the better chance you have of unleashing your super SPECIAL ATTACK which can be one of many powers (but won't always hit)...")
        time.sleep(7)
        print("\nBe warned though, if the enemy guards while you try to use your special move, then they'll stop you right in your tracks")
        time.sleep(5)
        print("\nYour planning ability is based on your stand's development potential, which is " + str(s_move_power) + ", the higher it is, the better and more useful your planned special move will be (based on your stand ability)")
        time.sleep(7)
        print("\nWhen you start, you'll see a menu that will show you and your enemy's health along with your battle options and which keys you need to input for each one")
        time.sleep(6)
        print("\nYou will also see a health bar for you and for your enemy, each '-' on the health bar will represent '50' health points or 'HP' but you'll have more accurate health points above")
        time.sleep(7)
        print("\nAlong with the battle options you'll see the relative chances that you'll be able to dodge an attack unharmed and successfully use your special attack")
        time.sleep(6)
        print("\nIf you win your fight (doubt it), then you'll have you and your stand's overview stored in a special HALL OF FAME for special stand user and stand pairs")
        time.sleep(6)
        print("\nHowever if you lose, then you'll recieve a disconcerting punishment... So don't even think about losing...")
        time.sleep(5)
        print("\nNow you should be caught up to speed with the intrinsics of battling, now... SHOW ME YOUR MOVES!!!\n")
        time.sleep(3)
        #Check improvement 1
        battling()
    else:
        print("\nError, incorrect input. Please try again")
        time.sleep(2)
        battle_intro()

def dodging():
    x_number=random.randint(1,12)
    
    if int(x_number)<=int(dodge): 
        print("\nOhhh, nice dodge\n")
        time.sleep(3)
        during_fight()
        battling()
    elif int(x_number)>int(dodge):
        print("\nToo slow, too slow!\n")
    else:
        print("EEEEEEEEEERRRRRRRRRRRRRRROOOOOOOOOOOOOORRRRRRRRRRR")

def e_dodging():
    e_number=random.randint(1,12)
    
    if int(e_number)<=int(e_dodge):
        print("\nAyyy looks like they dodged\n")
        time.sleep(3)
        during_fight()
        battling()
    else:
        print("\nThey failed that dodge *trombone noise*\n")

def switch():
    global box
    global attack
    global e_attack
    
    box=int(attack)
    attack=int(e_attack)
    e_attack=int(box)

def health_regain():
    global hp

    hp=int(hp_box)

def e_attack_reduction():
    global e_attack
    global e_box
    global success_move

    e_box=int(e_attack)
    e_attack=int(e_box)

    if int(success_move)==0:
        e_attack=int(e_box)
        e_box=int(e_attack)

def planning():
    global hp
    global box
    global number

    number=random.randint(1,12)
    
    if int(number)>int(plan):
        print("\nLooks like your special attack didn't work that time...\n")
        if int(enemy_choice)==1:
            hp=int(hp-e_attack)
        time.sleep(2)
    elif int(number)<=int(plan) and int(enemy_choice)==2:
        print("\nULTIMATE SPECIAL ATTACK...\n")
        time.sleep(3)
        print("\nOH NO, THEY GUARDED!!!!!!!!!!!!!!")
        time.sleep(2)
        print("\nYour special attack didn't work...\n")
        time.sleep(2)
    else:
        #could add an "if" here and change "success_move" to 2 instead, stopping the user from using their special attack more than once, maybe?
        planning_2()

def planning_2(): #Quick note, banter
    global move_done_already
    global e_hp
    global hp_box
    global hp
    global e_attack
    global attack
    global dodge
    global success_move
    global round_number
    global e_box

    success_move="1"
    if s_powers==all_powers[0]:
        hp=int(((factor/10)+1)*hp)
        if int(enemy_choice)==1:
            show_hp="You were attacked as you tried to heal so your health is now " + str(int(hp-e_attack))
        elif int(enemy_choice)!=1:
            show_hp="You healed without getting hurt so your health is now " + str(hp) 
        move_message="\n" + str(show_hp) 
    elif s_powers==all_powers[1]:
        e_hp=int((1-(factor/10))*e_hp)
        move_message="\nYou splurted out acid onto the enemy and reduced their health to " + str(e_hp)
    elif s_powers==all_powers[2]: #WORKS
        dodge=int(((factor/10)+1)*dodge)
        show_dodge=int((dodge/12)*100)
        move_message="\nYour leg anatomy changed into a " + str(animal_copy) + "'s and your dodging has increased to " + str(show_dodge) + "%"
    elif s_powers==all_powers[3]:
        e_hp=int((1-(factor/10))*e_hp)
        move_message="\nYou morphed completely into a " + str(animal) + " and you attacked the enemy, reducing their health to " + str(e_hp)
    elif s_powers==all_powers[4]:
        move_message="\nYou switched arms with the enemy, switching your attacks with each other"
    elif s_powers==all_powers[5]:
        e_attack=int(e_box)
        e_attack=int((1-(factor/10))*e_attack)
        show_e_attack=int(e_box-e_attack)
        move_message="\nYou created a layer of bone across your body and increased your defense, weakening the enemy's attack by " + str(show_e_attack) + " damage"
    elif s_powers==all_powers[6]:
        clone_damage=int((factor/10)*attack)
        move_message="\nYou fabricated a clone of yourself which will attack the enemy with " + str(clone_damage) + " damage each round until attacked"
    elif s_powers==all_powers[7]:
        move_message="\nYou succeeded in communicating with an alternate version of you and now know the enemy's plans before they decide for " + str(factor) + " " + str(round_thing)
    elif s_powers==all_powers[8]:
        move_message="\nYou produced echoes to map the area and know the exact location of the enemy, stopping their dodging completely for " + str(factor) + " " + str(round_thing)
    elif s_powers==all_powers[9]:
        move_message="\nYou suddenly disappeared from view, turning temporarily invisible to the naked eye and avoiding all attacks"
    elif s_powers==all_powers[10]:
        move_message="\nYou changed your body texture to diamond and are now temporarily invulnerable to all attacks"
    elif s_powers==all_powers[11]:
        e_attack=int(e_box)
        e_attack=int((e_attack*(1-(factor/10))))
        show_e_attack=int(e_box-e_attack)
        attack=int(box)
        attack=int(e_attack+attack)
        show_attack=int(box-attack)
        move_message="\nYou absorbed " + str(f_factor) + "% of the enemy's kinetic power, reduing their attack by " + str(show_e_attack) + " and increased your own attack by " + str(show_attack)
    elif s_powers==all_powers[12]:
        move_message="\nYou ingested part of the enemy's body material and reduced the enemy's attack by half for " + str(factor) + " " + str(round_thing)
    elif s_powers==all_powers[13]:
        attack=int((attack/2)*factor)
        e_hp=int(e_hp-attack)
        if int(factor)==1:
            being="being"
        elif int(factor)!=1:
            being="beings"
        move_message="\nYou seperated into " + str(factor) + " different " + str(being) + " with half the user's normal attack every time they all attack"
    elif s_powers==all_powers[14]:
        move_message="\nYou secreted natural pheromones that weakened the enemy's attack by half for " + str(factor) + " " + str(round_thing)        
    elif s_powers==all_powers[15]:
        move_message="\nYou launched poisonous spikes towards the enemy which will slowly drain their health by " + str(f_factor) + "% until they attack the spikes"
    elif s_powers==all_powers[16]:
        move_message="\nYou grew your hair out instantaneously and guarded yourself, halving any enemy attacks"        
    elif s_powers==all_powers[17]: 
        e_attack=int(e_attack*(1-(factor/10)))
        move_message="\nYou evolved a " + str(f_factor) + "% immunity to the enemy's current attacks" 
    elif s_powers==all_powers[18]:
        e_hp=int(e_hp*(1-(factor/10)))
        move_message="\nBOOOOOOM!!!!!!!!!!!!!!! YOU BLEW UP!!!!!!! \n\nYou exploded and injured the enemy, but now your weak against the enemy's attack for a round while you form back again"
    elif s_powers==all_powers[19]:
        move_message="\nYou shrieked out with powerful ultrasounds and were successfully able to confuse the enemy for " + str(factor) + " " + str(round_thing) 
    elif s_powers==all_powers[20]:
        move_message="\nYou howled at the enemy at sub-zero temperaturess and ice started to form over the enemy, stopping their dodging for " + str(factor) + " " + str(round_thing)

    if int(number)<=int(plan) and int(enemy_choice)==1:
        print("\nULTIMATE SPECIAL ATTACK...\n")
        time.sleep(3)
        print(str(s_move) + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
        if s_powers!=all_powers[16]:
            hp=int(hp-e_attack)
        time.sleep(3)
    elif int(number)<=int(plan) and int(enemy_choice)==3:
        print("\nULTIMATE SPECIAL ATTACK...\n")
        time.sleep(3)
        print(str(s_move) + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
        time.sleep(3)

    print(str(move_message) + "\n")
    round_number=0
    time.sleep(2)
        
def retry_battle():
    global hp
    global original_hp
    global e_hp
    global original_e_hp
    global attack
    global original_attack
    global e_attack
    global original_e_attack
    global dodge
    global original_dodge
    global e_dodge
    global original_e_dodge
    global success_move
    global rounds
    global round_number
    global getting_e_name
    global did_battle
    global x
    
    retry=input('''\nWould you like to ...
1: Have a rematch against「''' + str(e_name) + '''」
2: Fight against a new enemy
3: No battle (BOOOOORING): ''')
    if retry=="1" or retry=="2":
        hp=int(original_hp)
        e_hp=int(original_e_hp)
        attack=int(original_attack)
        e_attack=int(original_e_attack)
        dodge=int(original_dodge)
        e_dodge=int(original_e_dodge)
        success_move="0"
        rounds=int(1)
        round_number=int(0)
        if retry=="2":
            x=0
            getting_e_name=1
            names()
            did_battle="0"
        asking_battle()
    elif retry=="3":
        print("\n-----------------------------------------------------------------------------------\n")
        print("\nToo bad! That's all you're gonna get! 「HELL TO YOU」ゴ ゴ ゴ ゴ ゴ")
        quit()
        #PUT THE NEW FUNCTION HERE WHICH HASN'T BEEN DECIDED YET!!!!!!!!!!!!!!!!!!!-Done
    else:
        print("\nError, incorrect input. Please try again")
        time.sleep(2)
        retry_battle()

def battling(): ##########MAKE ANOTHER FUNCTION FOR AN INTRO TO THE BATTLING BASICS!!!!!!!-Done
    global hp
    global e_hp
    global already_won
    global enemy_choice
    global rounds
    global hp_box
    global b_choice
    global success_move
    global g_attack
    global g_e_attack
    global round_number
    global everything
    global python
    global e_stats
    global asking_battle_option
    
    def victory():
        global rounds
        global asking_battle_option
        global did_battle

        did_battle="1"
        
        if str(asking_battle_option)=="1":
            rounds=int(rounds-1)
            print("\n*turns around and spits on the ground* 'Man, your 「" + str(e_name) + "」 is a truly terrifying 「STAND」. Alas if you thought your power could beat my 「" + str(s_name) + "」, you were in for a surprise...'")
            time.sleep(8)
            print("\n'" + str(c_phrase) + "'")
            time.sleep(5)
            print("\nWOW, I DIDN'T THINK YOU'D DO IT, BUT YOU WON!!!!!!!!")
            time.sleep(3)
            print("\nYou deserve to be put in the 'Hall Of Fame', and I won't even make you wait, maybe a little hehe...")
            time.sleep(5)
            f=open("Hall_Of_Fame.txt","a", encoding="utf-8")
            wow=("\n\n\n\nTHIS STAND AND STAND USER HAVE SHOWN UNRIVALLED VALOUR AND COURAGE IN THEIR BATTLE AND SO DESERVE TO BE IMMORTALISED IN THIS FILE\n")
            enemy_stand_file=(str(name) + " with their stand 「" + str(s_name) + "」 have officially beaten Python and their stand 「" + str(e_name) + "」, their stats are listed below\n")
            user_win_rounds=("Rounds needed to beat Python- " + str(rounds))
            f.write(str(wow))
            f.write(str(enemy_stand_file))
            f.write(str(everything))
            f.write(str(user_win_rounds))
            f.close()
        elif str(asking_battle_option)=="2":
            print("Well done... PSYCH, THAT WASN'T YOuR REAL STRENGTH, IF YOU WANNA BE BUT INTO THE HALL OF FAME, YOU'VE GOTTA SHOW ME WHAT YOU GOT!!!!!")
            time.sleep(7)

    def defeat():
        global rounds

        did_battle="1"
        rounds=int(rounds-1)
        colour_choice()
        ########################################################## TALK ABOUT STAND SPECIAL MOVE
        enemy_stand_file_stats=('''\n\nStand User- Python
Stand Name-「''' + str(e_name) + '''」
Stand Ability- ''' + str(e_powers) + '''
Stand Class- ''' + str(e_class) + '''
Special Attack- ''' + str(s_move) + ''' - ''' + str(s_move_desc) + '''
\n-----------------------------------------
Stand Statistics:
Power- ''' + str(e_stats[0]) + '''
Speed- ''' + str(e_stats[1]) + '''
Range- ''' + str(e_stats[2]) + '''
Durability- ''' + str(e_stats[3]) + '''
Precision- ''' + str(e_stats[4]) + '''
Development Potential- ''' + str(e_stats[5]) + '''\n-----------------------------------------
Colour Scheme:
Primary Colour- ''' + str(f_colour) + '''
Secondary Colour- ''' + str(s_colour) + '''\n-----------------------------------------
Height- ''' + str(height) + '''\n-----------------------------------------
Rounds needed to beat ''' + str(name) + '''- ''' + str(rounds) + '''\n-----------------------------------------
\n-----------------------------------------
''')
        print("\nAw... It seems you weren't strong enough to win...\n")
        #########################MAKE A FOLDER OF EMBARASSMENT WITH ENEMY STATS ON THEM ONLY ON THE DESKTOP!!!!!!!!!
        time.sleep(3)
        enemy_win=("Python (User of " + str(e_name) + "): '" + str(name) + " was a joke, it only took " + str(rounds) + " rounds for me to beat " + str(name) + " and their sorry excuse for a stand, 「" + str(s_name) + "」's sorry butt with my 「" + str(e_name) + "」\n")
        f=open("C:\\Users\\" + os.getlogin() + "\\Desktop\\ENEMY CONQUERERS.txt","a", encoding="utf-8")
        f.write(enemy_win)
        f.write(enemy_stand_file_stats)
        f.close()
        print("WHAT A LOSER!!!!! YOU THINK YOU'RE JUST GONNA SULK THERE WITH NOTHING HAPPENING, OH NO. YOU'RE GONNA HAVE ALL THE ENEMY DATA STORED IN AN EMBARASSMENT FOLDER, STORED SOMEWHERE ON THE COMPUTER WITHOUT YOU KNOWING!!!!!!!!!!!!!!!!!!!!!!!")

    g_attack=int(attack/2)
    g_e_attack=int(e_attack/2)

    health_bar=("-" * int(hp/50))
    e_health_bar=("-" * int(e_hp/50))

    enemy_choice=random.randint(1,3)
    if s_powers==all_powers[18] and int(success_move)==1:
        enemy_choice=1
        
    if int(enemy_choice)==1:
        e_choice="Attack"
    elif int(enemy_choice)==2:
        e_choice="Guard"
    elif int(enemy_choice)==3:
        e_choice="Dodge"
        
    if s_powers==all_powers[7] and int(success_move)==1:
        print("-----------------------------------------")
        print("\n'The enemy will try to... " + str(e_choice) + "'\n")
        print("-----------------------------------------")

    hp_box=int(hp)
    
    move_rounds_left=int((factor-round_number)+1)
    if int(move_rounds_left)==1:
        rounds_left="round"
    elif int(move_rounds_left)!=1:
        rounds_left="rounds"
        
    if success_move=="1" and during_fight_power=="1":
        print("\nYour special move has " + str(move_rounds_left) + " " + str(rounds_left) + " left")
        print("-----------------------------------------")

    show_dodge=int((dodge/12)*100)
    show_plan=int((plan/12)*100)
    
    if str(asking_battle_option)=="1":
        battle_choice=input('''\nROUND ''' + str(rounds) + '''\n''' + str(name) + '''-「''' + str(s_name) + '''」 HP- ''' + str(hp) + '''          Python-「''' + str(e_name) + '''」 HP- ''' + str(e_hp) + '''
''' + str(name) + ''' HP- ''' + str(health_bar) + '''          Python HP- ''' + str(e_health_bar) + '''
Moves:
1: Attack      ''' + str(attack) + '''
2: Guard 
3: Dodge       ''' + str(show_dodge) + '''%
4: Plan        ''' + str(round(show_plan, 0)) + '''%
Enter yout choice- ''')
        if battle_choice!="1" and battle_choice!="2" and battle_choice!="3" and battle_choice!="4":
            print("\nThat's an incorrect input!!!!!!!!!!!!!!!!!!!!!!")
            print("\nTry again!")
            time.sleep(3)
            battling()
        battle_choice=int(battle_choice)
    elif str(asking_battle_option)=="2":
        battle_choice=input('''\nROUND ''' + str(rounds) + '''\n''' + str(name) + '''-「''' + str(s_name) + '''」 HP- ''' + str(hp) + '''          Python-「''' + str(e_name) + '''」 HP- ''' + str(e_hp) + '''
Moves:
Attack      ''' + str(attack) + '''
Guard 
Dodge       ''' + str(show_dodge) + '''%
Plan        ''' + str(round(show_plan, 0)) + '''%
Press 1 to see the cpu's choice- ''')
        if battle_choice=="1":
            battle_choice=random.randint(1,4)
        elif battle_choice!="1":
            print("\nThat's an incorrect input!!!!!!!!!!!!!!!!!!!!!!")
            print("Try again!\n")
            time.sleep(3)
            battling() 
        
    if int(battle_choice)==1:
        b_choice="Attack"
    elif int(battle_choice)==2:
        b_choice="Guard"
    elif str(battle_choice)=="3":
        b_choice="Dodge"
    elif str(battle_choice)=="4":
        b_choice="Plan"
    elif str(battle_choice)!="1" or "2" or "3" or "4":
        b_choice="N/A"
        

    print("YOUR CHOICE-" + str(b_choice))
    print("ENEMY CHOICE-" + str(e_choice))
    rounds=int(rounds+1)
    #if str(asking_battle_option)=="1":
     #   if battle_choice.isnumeric()!=True:
      #      print("\nThat's an incorrect input!!!!!!!!!!!!!!!!!!!!!!")
       #     print("Try again!\n")
        #    time.sleep(3)
         #   battling()
    if int(hp)<=0:
        defeat()
    elif int(e_hp)<=0:
        victory()
    elif int(enemy_choice)==1 and int(battle_choice)==1:
        if s_powers==all_powers[16] and int(success_move)==1:
            hp=int(hp-g_e_attack)
            print("\nYour hair protected you!")
        elif s_powers==all_powers[18] and int(success_move)==1:
            hp=int((hp-e_attack)-e_attack)
            success_move==0
        else:
            hp=int(hp-e_attack)
        e_hp=int(e_hp-attack)
        print("\nYou both attacked, noooooice\n")
        time.sleep(3)
        if int(hp)<=0 and int(e_hp)<=0:
            print("\nDOUBLE DEATH, looks like no-one won the battle...\n")
        elif int(e_hp)<=0:
            victory()
        elif int(hp)<=0:
            defeat()
        else:
            during_fight()
            battling()
    elif int(enemy_choice)==1 and int(battle_choice)==2:
        if s_powers==all_powers[16] and int(success_move)==1:
            hp=int(hp-(g_e_attack/2))
            print("\nYour hair protected you!")
        elif s_powers==all_powers[18] and int(success_move)==1:
            hp=int(hp-e_attack)
            success_move==0
        else:
            hp=int(hp-g_e_attack)
        print("\nNice, you guarded their attack!\n")
        time.sleep(3)
        if int(hp)<=0:
            defeat()
        else:
            during_fight()
            battling()
    elif int(enemy_choice)==1 and int(battle_choice)==3:
        dodging()
        if s_powers==all_powers[16] and int(success_move)==1:
            hp=int(hp-g_e_attack)
            print("\nYour hair protected you!")
        elif s_powers==all_powers[18] and int(success_move)==1:
            hp=int((hp-e_attack)-e_attack)
            success_move==0
        else:
            hp=int(hp-e_attack)
        time.sleep(2)
        if int(hp)<=0:
            defeat()
        else:
            during_fight()
            battling()
    elif int(enemy_choice)==1 and int(battle_choice)==4:
        planning()
        if s_powers==all_powers[16] and int(success_move)==1:
            hp=int(hp-g_e_attack)
            print("\nYour hair protected you!")
        elif s_powers==all_powers[18] and int(success_move)==1:
            hp=int((hp-e_attack)-e_attack)
            success_move==0
        time.sleep(2)
        if int(hp)<=0:
            defeat()
        else:
            during_fight()
            battling()
    elif int(enemy_choice)==2 and int(battle_choice)==1:
        e_hp=int(e_hp-g_attack)
        if int(e_hp)<=0:
            victory()
        else:
            print("\nOhhh, looks like they guarded your attack, snap\n")
            time.sleep(3)
            during_fight()
            battling()
    elif int(enemy_choice)==2 and int(battle_choice)==2:
        print("\nYou both guarded, WELL DONE *claps*\n")
        time.sleep(3)
        during_fight()
        battling()
    elif int(enemy_choice)==2 and int(battle_choice)==3:
        print("\nThey tried to guard your dodge... Smooth guys, MAKE IT MORE INTERESTING (or don't idc)\n")
        time.sleep(3)
        during_fight()
        battling()
    elif int(enemy_choice)==2 and int(battle_choice)==4:
        planning()
        during_fight()
        battling()
    elif int(enemy_choice)==3 and int(battle_choice)==1:
        e_dodging()
        e_hp=int(e_hp-attack)
        time.sleep(3)
        if int(e_hp)<=0:
            victory()
        else:
            during_fight()
            battling()
    elif int(enemy_choice)==3 and int(battle_choice)==2:
        print("\nYou tried to guard their dodge... NICEU NICEU!\n")
        time.sleep(3)
        during_fight()
        battling()
    elif int(enemy_choice)==3 and int(battle_choice)==3:
        print("\nBoth of you tried to dodge, hehe looks like NOBODY GOT HURT\n")
        time.sleep(3)
        during_fight()
        battling()
    elif int(enemy_choice)==3 and int(battle_choice)==4:
        e_dodging()
        planning()
        during_fight()
        battling()
    #else:
     #   print("\nThat's an incorrect input!!!!!!!!!!!!!!!!!!!!!!")
      #  print("\nTry again!")
       # time.sleep(3)
        #battling()
    retry_battle()

def during_fight():
    global box
    global success_move
    global hp_box
    global round_number
    global e_hp
    global hp
    global e_dodge
    global e_attack
    global round_number
    global e_box
    
    if success_move=="1":
        #Arm switching
        if s_powers==all_powers[4]:
            if int(round_number)==0:
                switch()
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                switch()
                print("\nYour power faded and your arm limbs switched back with the enemy's...\n")
                time.sleep(2)
                success_move=0
                round_number=0
        #Creating clone
        elif s_powers==all_powers[6]:
            if int(enemy_choice)==1:
                print("\nYour clone has been attacked and killed... Suck it up and deal with it (or make another one idc)...\n")
                success_move=0
                round_number=0
            elif int(enemy_choice)!=1:
                print("\nYour clone attacked!\n")
                e_hp=int(e_hp-(attack*(factor/10)))
            time.sleep(2)
        #Predicting moves
        elif s_powers==all_powers[7]:
            if int(round_number)==0:
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                print("\nYou ran out of knowledge and are now unable to see into the future...\n")
                time.sleep(2)
                success_move=0
                round_number=0
        #'Echoes'-location, ayyy... + Freezing shout
        elif s_powers==all_powers[8] or s_powers==all_powers[20]:
            if int(round_number)==0:
                box=int(e_dodge)
                e_dodge=0
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                e_dodge=int(box)
                if s_powers==all_powers[8]:
                    print("\nYour echolocation has worn out and their dodging went back to normal...\n")
                elif s_powers==all_powers[20]:
                    print("\nYour frost was thawed out of and their dodging went back to normal...\n")
                time.sleep(2)
                success_move=0
                round_number=0
        #Invisibility + Invulnerability + Sonic screaming- Works fine
        elif (s_powers==all_powers[9]) or (s_powers==all_powers[10]) or (s_powers==all_powers[19]): 
            if int(round_number)==0:
                health_regain()
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                health_regain()
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                if s_powers==all_powers[9]:
                    print("\nYour invisibility stopped working and you're now vulnerable to attacks again...\n")
                elif s_powers==all_powers[10]:
                    print("\nYour invulnerability stopped working and you're now vulnerable to attacks again...\n")
                elif s_powers==all_powers[19]:
                    print("\nYour ultrasound screams stopped working on the enemy and they have regained awareness of their surroundings again...\n")
                time.sleep(2)
                success_move=0
                round_number=0
        #Matter absorbtion + Pheromone production
        elif s_powers==all_powers[12] or s_powers==all_powers[14]:
            if int(round_number)==0:
                e_attack=int(e_attack/2)
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                e_attack=int(e_box)
                #e_attack=int(e_attack*2)
                if s_powers==all_powers[12]:
                    print("\nYour absorbed matter decayed and the enemy's attack power has returned to normal...\n")
                elif s_powers==all_powers[14]:
                    print("\nYour pheromones diminished in effectiveness and the enemy's attack power returned to normal...\n")
                time.sleep(2)
                success_move=0
                round_number=0
        #Poison spike generation- Works
        elif s_powers==all_powers[15]: #This power is very op but is hard to achieve, but just the right amount of "hard"
            if int(enemy_choice)==1:
                print("\nUnlucky, your poison spikes were destroyed and are now ineffective...\n")
                time.sleep(2)
                success_move=0
                round_number=0
            elif int(enemy_choice)!=1:
                box=int(e_hp)
                e_hp=int(e_hp*(1-(factor/10)))
                hp=int(hp+(box-e_hp))
                print("\nYou sapped their health!\n")
                time.sleep(2)
        #Hair growth
        elif s_powers==all_powers[16]: #Test this power out and see if it works
            if int(round_number)==0:
                round_number=int(round_number+1)
            elif int(round_number)!=0 and int(round_number)!=factor:
                round_number=int(round_number+1)
            elif int(round_number)==int(factor):
                print("\nYour hair withered away and you're vulnerable to attacks again\n")
                time.sleep(2)
                success_move=0
                round_number=0

#######################What could new function be about, hmm........ Check wikia/episodes maybe? Put new function in "importing()" section
ask_if_importing()

names()
carry_on()

stand_ability()
carry_on()

stand_s_move()
carry_on()

colour_choice()
stand_appearance()
carry_on()

overview()
carry_on()

file_save()
carry_on()

asking_battle()
carry_on()

print("\nToo bad! That's all you're gonna get! 「HELL TO YOU」ゴ ゴ ゴ ゴ ゴ")
quit()
